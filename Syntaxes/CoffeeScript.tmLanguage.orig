<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>comment</key>
	<string>CoffeeScript Syntax: version 1</string>
	<key>fileTypes</key>
	<array>
		<string>coffee</string>
		<string>Cakefile</string>
		<string>coffee.erb</string>
	</array>
	<key>firstLineMatch</key>
	<string>^#!.*\bcoffee</string>
	<key>foldingStartMarker</key>
	<string>(?x)
													^\s*class\s+\S.*$ 	# Class def
												| (?:-&gt;|=&gt;)\s*$				# Function def
												| ^\s* 								# Object member
														(?:(['"]).*\1|[^'"]*) # (Un)quoted attribute name 
														: 											# Colon
														\s*(?:$|\s\#) # End of line or trailing comment
<<<<<<< HEAD
												| ^[^\#]*\#{3}[^\#]*$ 						# Multiline comment
												| ^[^\/]*\/{3}[^\/]*(?:$|\s+\#)	# Heregex
												| ^[^"]*"{3}[^"]*$									# Double quoted heredoc
=======
												| ^[^\#]*\#\#\#[^\#]*$ 						# Multiline comment
												| ^[^\/]*\/\/\/[^\/]*(?:$|\s+\#)	# Heregex
												| ^[^"]*"""[^"]*$									# Double quoted heredoc
>>>>>>> origin/folding-blocks
												| ^[^']*[']{3}[^']*$						# Single quoted heredoc
												| [\[\{\(]\s*$										# Opening sq bracket, brace, paren
												| \s*switch												# switch statement
												| ^\s*(else)?\s*(?:if|unless)(?!.*then) # if statement
								        | else\s*$                          # else block
								        | ^\s*(?:try|catch.*)\s*    # try/catch block
								        | ^(\s*|.*[=:]\s*)(?:for|while|until|loop) # loops
	</string>
	<key>foldingStopMarker</key>
	<string>(?x)
												^\s*$
											| ^\s*[\}\]\)] 	
											| ^\s*[\/\#\"']{3}$ 			
							# This last line prevents closing tags from opening
							# another folding block. Use properly indented      
							# whitespace to end fold blocks
	</string>
	<key>keyEquivalent</key>
	<string>^~C</string>
	<key>name</key>
	<string>CoffeeScript</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.function.coffee</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.coffee</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>match stuff like: a -&gt; â€¦ </string>
			<key>match</key>
			<string>(\([^()]*?\))\s*([=-]&gt;)</string>
			<key>name</key>
			<string>meta.inline.function.coffee</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.new.coffee</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.instance.coffee</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(new)\s+(\w+(?:\.\w*)*)</string>
			<key>name</key>
			<string>meta.class.instance.constructor</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>'''</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.coffee</string>
				</dict>
			</dict>
			<key>end</key>
			<string>'''</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.coffee</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.heredoc.coffee</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>"""</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.coffee</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"""</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.coffee</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.heredoc.coffee</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>constant.character.escape.coffee</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_coffee</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>`</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.coffee</string>
				</dict>
			</dict>
			<key>end</key>
			<string>`</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.coffee</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.script.coffee</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)</string>
					<key>name</key>
					<string>constant.character.escape.coffee</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?&lt;!#)###(?!#)</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.coffee</string>
				</dict>
			</dict>
			<key>end</key>
			<string>###(?:[ \t]*\n)</string>
			<key>name</key>
			<string>comment.block.coffee</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>@\w*</string>
					<key>name</key>
					<string>storage.type.annotation.coffeescript</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.coffee</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(#).*$\n?</string>
			<key>name</key>
			<string>comment.line.number-sign.coffee</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>/{3}</string>
			<key>end</key>
			<string>/{3}[imgy]{0,4}</string>
			<key>name</key>
			<string>string.regexp.multiline.coffee</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_coffee</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#embedded_comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#regex</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
<<<<<<< HEAD
			<string>[^\\']/(?![\s=/*+{}?])</string>
=======
			<string>/(?![\s=/*+{}?])</string>
>>>>>>> origin/folding-blocks
			<key>comment</key>
			<string>match = '/(?![\s=/*+{}?]).*?[^\]/[igmy]{0,4}(?![a-zA-Z0-9])';</string>
			<key>end</key>
			<string>/[imgy]{0,4}(?![a-zA-Z0-9])</string>
			<key>name</key>
			<string>string.regexp.coffee</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regex</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?&lt;![\.\$])(break|by|catch|continue|else|finally|for|in|of|if|return|switch|then|throw|try|unless|when|while|until|loop|do|(?&lt;=for)\s+own)(?!\s*:)\b</string>
			<key>name</key>
			<string>keyword.control.coffee</string>
		</dict>
		<dict>
			<key>match</key>
			<string>and=|or=|!|%|&amp;|\^|\*|\/|\-\-|\-|\+\+|\+|~|===|==|=|!=|!==|&lt;=|&gt;=|&lt;&lt;=|&gt;&gt;=|&gt;&gt;&gt;=|&lt;&gt;|&lt;|&gt;|!|&amp;&amp;|\?|\||\|\||\:|\*=|(?&lt;!\()/=|%=|\+=|\-=|&amp;=|\^=|\b(?&lt;![\.\$])(instanceof|new|delete|typeof|and|or|is|isnt|not)\b</string>
			<key>name</key>
			<string>keyword.operator.coffee</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.assignment.coffee</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.key-value</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.coffee</string>
				</dict>
			</dict>
			<key>match</key>
			<string>([a-zA-Z\$_](\w|\$|\.)*\s*(?!\::)((:)|(=))(?!(\s*\(.*\))?\s*((=|-)&gt;)))</string>
			<key>name</key>
			<string>variable.assignment.coffee</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?&lt;=\s|^)([\[\{])(?=.*?[\]\}]\s+[:=])</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.coffee</string>
				</dict>
			</dict>
			<key>end</key>
			<string>([\]\}]\s*[:=])</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.coffee</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.variable.assignment.destructured.coffee</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#variable_name</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#instance_variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#single_quoted_string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#double_quoted_string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#numeric</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.coffee</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.coffee</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.function.coffee</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.coffee</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(\s*)(?=[a-zA-Z\$_])([a-zA-Z\$_](\w|\$|:|\.)*\s*(?=[:=](\s*\(.*\))?\s*((=|-)&gt;)))</string>
			<key>name</key>
			<string>meta.function.coffee</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(=|-)&gt;</string>
			<key>name</key>
			<string>storage.type.function.coffee</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?&lt;!\.)(true|on|yes)(?!\s*[:=])\b</string>
			<key>name</key>
			<string>constant.language.boolean.true.coffee</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?&lt;!\.)(false|off|no)(?!\s*[:=])\b</string>
			<key>name</key>
			<string>constant.language.boolean.false.coffee</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?&lt;!\.)null(?!\s*[:=])\b</string>
			<key>name</key>
			<string>constant.language.null.coffee</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?&lt;!\.)(super|this|extends)(?!\s*[:=])\b</string>
			<key>name</key>
			<string>variable.language.coffee</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.class.coffee</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.class.coffee</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.control.inheritance.coffee</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>entity.other.inherited-class.coffee</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(class\b)\s+([a-zA-Z\$_][\w\.]+)?(?:\s+(extends)\s+([a-zA-Z\$\._][\w\.]*))?</string>
			<key>name</key>
			<string>meta.class.coffee</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(debugger|\\)\b</string>
			<key>name</key>
			<string>keyword.other.coffee</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(Infinity|NaN|undefined)\b</string>
			<key>name</key>
			<string>constant.language.coffee</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\;</string>
			<key>name</key>
			<string>punctuation.terminator.statement.coffee</string>
		</dict>
		<dict>
			<key>match</key>
			<string>,[ |\t]*</string>
			<key>name</key>
			<string>meta.delimiter.object.comma.coffee</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\.</string>
			<key>name</key>
			<string>meta.delimiter.method.period.coffee</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\{|\}</string>
			<key>name</key>
			<string>meta.brace.curly.coffee</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\(|\)</string>
			<key>name</key>
			<string>meta.brace.round.coffee</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\[|\]\s*</string>
			<key>name</key>
			<string>meta.brace.square.coffee</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#instance_variable</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#single_quoted_string</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#double_quoted_string</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#numeric</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>character-class</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\[wWsSdDhH]|\.</string>
					<key>name</key>
					<string>constant.character.character-class.regexp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>constant.character.escape.backslash.regexp</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\[)(\^)?</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.character-class.regexp</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.negation.regexp</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\])</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.character-class.regexp</string>
						</dict>
					</dict>
					<key>name</key>
					<string>constant.other.character-class.set.regexp</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#character-class</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>constant.character.escape.backslash.regexp</string>
								</dict>
								<key>4</key>
								<dict>
									<key>name</key>
									<string>constant.character.escape.backslash.regexp</string>
								</dict>
							</dict>
							<key>match</key>
							<string>(.|(\\.))\-([^\]]|(\\.))</string>
							<key>name</key>
							<string>constant.other.character-class.range.regexp</string>
						</dict>
						<dict>
							<key>match</key>
							<string>&amp;&amp;</string>
							<key>name</key>
							<string>keyword.operator.intersection.regexp</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>double_quoted_string</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.coffee</string>
						</dict>
					</dict>
					<key>end</key>
					<string>"</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.coffee</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.coffee</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)</string>
							<key>name</key>
							<string>constant.character.escape.coffee</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#interpolated_coffee</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>embedded_comment</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.coffee</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\\)(#).*$\n?</string>
					<key>name</key>
					<string>comment.line.number-sign.coffee</string>
				</dict>
			</array>
		</dict>
		<key>instance_variable</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(@)([a-zA-Z_\$]\w*)?</string>
					<key>name</key>
					<string>variable.other.readwrite.instance.coffee</string>
				</dict>
			</array>
		</dict>
		<key>interpolated_coffee</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\#\{</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.embedded.coffee</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>name</key>
					<string>source.coffee.embedded.source</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>numeric</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\$)\b((0(x|X)[0-9a-fA-F]+)|([0-9]+(\.[0-9]+)?(e[+\-]?[0-9]+)?))\b</string>
					<key>name</key>
					<string>constant.numeric.coffee</string>
				</dict>
			</array>
		</dict>
		<key>regex</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\[bBAZzG]|\^|\$</string>
					<key>name</key>
					<string>keyword.control.anchor.regexp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\([0-7]{3}|x(\h\h|\{\h{,8}\}))</string>
					<key>name</key>
					<string>constant.character.numeric.regexp</string>
				</dict>
				<dict>
					<key>match</key>
<<<<<<< HEAD
					<string>\\[1-9]{,2}</string>
=======
					<string>\\[1-9]\d*</string>
>>>>>>> origin/folding-blocks
					<key>name</key>
					<string>keyword.other.back-reference.regexp</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.back-reference.named.regexp</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.section.back-reference</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.other.back-reference.named.regexp</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\\k\&lt;)([a-z]\w*)(\&gt;)</string>
					<key>name</key>
					<string>keyword.other.back-reference.named.regexp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\[\:(\^)?(alnum|alpha|ascii|blank|cntrl|x?digit|graph|lower|print|punct|space|upper)\]</string>
					<key>name</key>
					<string>constant.other.character-class.posix.regexp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[?+*][?+]?|\{(\d+,\d+|\d+,|,\d+|\d+)\}\??</string>
					<key>name</key>
					<string>keyword.operator.quantifier.regexp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\|</string>
					<key>name</key>
					<string>keyword.operator.or.regexp</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\(\?\#</string>
					<key>end</key>
					<string>\)</string>
					<key>name</key>
					<string>comment.block.regexp</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>We are restrictive in what we allow to go after the comment character to avoid false positives, since the availability of comments depend on regexp flags.</string>
					<key>match</key>
					<string>(?&lt;=^|\s)#\s[[a-zA-Z0-9,. \t?!-:][^\x{00}-\x{7F}]]*$</string>
					<key>name</key>
					<string>comment.line.number-sign.regexp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\(\?[imx-]+\)</string>
					<key>name</key>
					<string>keyword.other.option-toggle.regexp</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\()((\?=)|(\?!)|(\?&lt;=)|(\?&lt;!))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.group.regexp</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>meta.assertion.look-ahead.regexp</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>meta.assertion.negative-look-ahead.regexp</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>meta.assertion.look-behind.regexp</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>meta.assertion.negative-look-behind.regexp</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.group.regexp</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.group.assertion.regexp</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
<<<<<<< HEAD
							<string>#regex</string>
=======
							<string>$self</string>
>>>>>>> origin/folding-blocks
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\()((\?(&gt;|[imx-]*:))|(\?&lt;)([a-z]\w*)(&gt;))?</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.group.regexp</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.other.group-options.regexp</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>keyword.other.group-options.regexp</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>entity.name.section.group.regexp</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>keyword.other.group-options.regexp</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.group.regexp</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.group.regexp</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
<<<<<<< HEAD
							<string>#regex</string>
=======
							<string>$self</string>
>>>>>>> origin/folding-blocks
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#character-class</string>
				</dict>
			</array>
		</dict>
		<key>single_quoted_string</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.coffee</string>
						</dict>
					</dict>
					<key>end</key>
					<string>'</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.coffee</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.coffee</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)</string>
							<key>name</key>
							<string>constant.character.escape.coffee</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>variable_name</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.assignment.coffee</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([a-zA-Z\$_]\w*(\.\w+)*)</string>
					<key>name</key>
					<string>variable.assignment.coffee</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.coffee</string>
	<key>uuid</key>
	<string>5B520980-A7D5-4E10-8582-1A4C889A8DE5</string>
</dict>
</plist>
